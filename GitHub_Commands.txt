Command List

Use Git commands to help keep track of changes made to a project:

git init |creates a new Git repository
git status |inspects the contents of the working directory and staging area
git add |adds files from the working directory to the staging area
git diff |shows the difference between the working directory and the staging area
git commit permanently stores file changes from the staging area in the repository
git log shows a list of all previous commits

-------------------------------------------------------------------------------------------------------------------
# git add filename
Se usa para crear un nuevo archivo/carpeta en el directorio acutal

# git diff filename
Se usa para checar los cambios en un archivo

# git commit
A commit is the last step in our Git workflow. 
A commit permanently stores changes from the staging area inside the repository.
We need one last piece of code for the commit:
The option -m followed by a message. Here’s an example:

git commit -m "Complete first line of dialogue"

Standard Conventions for Commit Messages:

Must be in quotation marks
Written in the present tense
Should be brief (50 characters or less) when using -m

# git log
Often with Git, you’ll need to refer back to an earlier version of a project. Commits are stored chronologically in the repository and can be viewed with:

git log

